package org.example;

import java.util.List;


/*
 * Интерфейс IGood описывает общие методы для работы с коллекцией объектов товаров (Good).
 * Включает методы для добавления, удаления, вывода и сравнения товаров.
 */

public interface IGood {


    /*
     * Метод GoodList выводит список всех объектов в коллекции.
     * Если коллекция пуста, выводится сообщение об отсутствии данных.
     */

    default void GoodList(List<Object> GoodData){
        if (!GoodData.isEmpty()) {
            // Вывод всех элементов коллекции с индексами (индексы начинаются с 1)
            for (int i = 0; i < GoodData.size(); i++) {
                System.out.println(i + 1 + ") " + GoodData.get(i).toString());
            }
        } else {
            System.out.println("Нет данных");
        }
    }

    /*
     * Метод DeleteGood удаляет объект из коллекции по введенному индексу.
     * Индекс вводится пользователем с помощью объекта GetIndex.
     * Обрабатывает исключения при некорректном индексе.
     */

    default void DeleteGood(GetIndex getIndexObj, List<Object> GoodData){
        int index = getIndexObj.getIndex();
        try {
            // Удаление элемента из коллекции по индексу (индексы начинаются с 1)
            GoodData.remove(index - 1);
        } catch (Exception e) {
            // Игнорирование исключений при удалении
            System.out.println("Неверный индекс");
            return;
        }
        System.out.println("Успешно удалено");
    }

    /*
     * Метод addGood добавляет новую игрушку в коллекцию ToyData.
     * Запрашивает у пользователя информацию об игрушке и создает новый объект Toy.
     * Обрабатывает ошибки ввода и проверки диапазона значений.
     */
    void addGood(List<Object> GoodData);

    /**
     * Метод для добавления нового объекта (не реализован в интерфейсе, должен быть реализован в классах, которые реализуют интерфейс).
     */

    /*
     * Метод equal сравнивает две игрушки по индексам, введенным пользователем.
     * Проверяет, равны ли объекты по значению их полей, используя методы hashCode и equals.
     * Обрабатывает ошибки ввода и выводит результаты сравнения.
     */
    void equal(List<Object> GoodData);
}
